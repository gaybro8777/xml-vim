<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml" title="Profiling step"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY vi "Vim">
]>
<article lang="en" id="art.xmlvim">
 <title>Editing XML/DocBook Files with &vi;</title>
 <articleinfo>
  <legalnotice>
   <para>
    <ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html">GNU
    Free Documentation License</ulink>
   </para>
  </legalnotice>
 </articleinfo>
 <sect1>
  <title>Useful &vi; Settings</title>

  <para>
   &vi; stores its settings in <filename>~/.vimrc</filename>. Here are the
   ones that I generally find useful. Note that lines starting with
   <literal>"</literal> are comments.
  </para>

  <tip>
   <para>
    After you make changes to <filename>.vimrc</filename>, you can apply
    them without restarting the &vi; session with <command>:source
    ~/.vimrc</command>
   </para>
  </tip>

<screen>" break compatibility with the ancient vi
set nocompatible
" set autorecognition of file types
filetype on
filetype plugin on
filetype indent on
" syntax highlighting, of course
syntax on
" smart context sensitive indenting
set smartindent
" show the info status bar at the bottom
set ruler
" show line numbers
set number</screen>

  <para>
   Turn on default capabilities for XML and DocBook file types.
  </para>

<screen>
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType docbk set omnifunc=xmlcomplete#CompleteTags
</screen>

  <para>
   If you use tabs to edit several files at once, it is handy to map the the
   following shortcuts to switch between them.
  </para>

<screen>" switch the tabs with SHIFT + &lt; or &gt;
map &lt;S-Right&gt; :tabnext&lt;CR&gt;
map &lt;S-Left&gt; :tabprevious&lt;CR&gt;</screen>
 </sect1>
 <sect1>
  <title>Moving Around the Tags</title>

  <para>
   When editing an XML document, it is often useful to move and manipulate
   the text in the context of the XML tags. For example to erase the text
   the cursor is currently at, including the surrounding tags. Or to copy
   the inner text from the tag under cursor.
  </para>

  <sect2>
   <title>Text Objects</title>
   <para>
    &vi; knows about <emphasis>text objects</emphasis>. A text object is a
    part of text, such as word, sentence, block (block of text between
    brackets), or paragraph. You define them by pressing
    <literal>w</literal>, <literal>s</literal>, <literal>b</literal>, or
    <literal>p</literal>. &vi; knows about one text object related
    specifically to markup languages - a tag. A tag corresponds to a pair
    HTML/XML element.
   </para>
   <para>
    &vi; distinguishes between the inner part of a tag, and the whole tag
    including the surrounding markup. &vi; can also select a text enclosed
    in quotes, or jump the cursor between left or right sharp brackets. Get
    inspired by the following few useful examples:
   </para>
   <informaltable>
    <tgroup cols="3">
     <colspec colwidth="1in"/>
     <colspec colwidth="1.5in"/>
     <thead>
      <row>
       <entry>command</entry>
       <entry>how to remember</entry>
       <entry>description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><command>it</command>
       </entry>
       <entry>inner tag</entry>
       <entry>text placed inside XML element</entry>
      </row>
      <row>
       <entry><command>at</command>
       </entry>
       <entry>all tag</entry>
       <entry>same as <command>it</command> + the pair of surrounding tags</entry>
      </row>
      <row>
       <entry><command>2it</command>
       </entry>
       <entry>2 x inner tag</entry>
       <entry>select the inner text of the parent element (including the current tag)</entry>
      </row>
      <row>
       <entry><command>2at</command>
       </entry>
       <entry>2 x all tag</entry>
       <entry>select the whole parent element (including the current and the parent tags)</entry>
      </row>
      <row>
       <entry><command>f&gt;</command>
       </entry>
       <entry>find &gt;</entry>
       <entry>selects the text to the end of the closing tag, including '&gt;'</entry>
      </row>
      <row>
       <entry><command>t&lt;</command>
       </entry>
       <entry>find to &gt;</entry>
       <entry>selects the text to the end of the closing tag, without '&lt;'</entry>
      </row>
      <row>
       <entry><command>F&lt;</command>
       </entry>
       <entry>find &lt; backward</entry>
       <entry>selects the text from the beginning of the tag, including '&lt;'</entry>
      </row>
      <row>
       <entry><command>T&lt;</command>
       </entry>
       <entry>find to &lt; backward</entry>
       <entry>selects the text from the beginning of the tag, without '&lt;'</entry>
      </row>
      <row>
       <entry><command>a"</command>
       </entry>
       <entry>a string</entry>
       <entry>selects the text including the surrounding quotes, such as XML attribute</entry>
      </row>
      <row>
       <entry><command>i"</command>
       </entry>
       <entry>a string</entry>
       <entry>selects the text without the surrounding quotes, such as text of an XML attribute</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </sect2>
 </sect1>
 <sect1>
  <title>xml.vim Plugin</title>

  <para>
   The <literal>xml.vim</literal> plugin adds extended functionality to
   editing XML files, such as auto-closing tags, matching the beginning or
   end of a tag, or folding tags or comments.
  </para>

  <sect2>
   <title>Installation</title>
   <para>
    To install the <literal>xml.vim</literal> plugin, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      Download latest version of the <literal>xml.vim</literal> plugin from
      <ulink url="https://github.com/vim-scripts/xml.vim"/>.
     </para>
    </step>
    <step>
     <para>
      Unzip the file to the <filename>~/.vim/ftplugin/</filename> directory.
     </para>
    </step>
    <step>
     <para>
      Because &vi; uses other default XML features we want to use, edit
      <filename>~/.vim/ftplugin/xml.vim</filename> and comment
      (<literal>"</literal>) the line
     </para>
<screen>b:did_ftplugin = 1</screen>
    </step>
    <step>
     <para>
      Restart &vi;. Now you can access the plugin's help by entering
     </para>
<screen>:help xml-plugin</screen>
    </step>
   </procedure>
  </sect2>

  <sect2>
   <title>Added Value</title>
   <para>
    The following tables show goodies of <literal>xml.vim</literal>. Notice
    that '|' stands for the current cursor position.
   </para>
   <sect3>
    <title>Enhancements for the Insert Mode</title>
    <informaltable>
     <tgroup cols="4">
      <colspec colwidth=".8in"/>
      <colspec colwidth=".8in"/>
      <colspec colwidth="1.2in"/>
      <thead>
       <row>
        <entry>mapping</entry>
        <entry>when</entry>
        <entry>result</entry>
        <entry>description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
<screen>&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para|</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;|&lt;/para&gt;</screen>
        </entry>
        <entry>closes the current tag and puts the cursor between the
         opening and ending tag</entry>
       </row>
       <row>
        <entry>
<screen>&gt;&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para|</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;
    |
&lt;/para&gt;</screen>
        </entry>
        <entry>closes the current tag, inserts newline between the tags,
         and puts the cursor on the blank line</entry>
       </row>
       <row>
        <entry>
<screen>;;</screen>
        </entry>
        <entry>
<screen>para|</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;|&lt;/para&gt;</screen>
        </entry>
        <entry>makes a pair of tags out of the preceding word,
         and puts the cursor between them</entry>
       </row>
       <row>
        <entry>
<screen>;;</screen>
        </entry>
        <entry>
<screen>
para|
</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;
    |
&lt;/para&gt;</screen>
        </entry>
        <entry>when the word is on its own line, makes a pair of tags out
         of the preceding word, inserts newline between the tags,
         and puts the cursor on the blank line</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
   <sect3>
    <title>'[' and ']' Mappings for the Command Mode</title>
    <tip>
     <para>
      Some of the following mappings use &lt;localleader&gt; key before the
      mapping itself. It is backslash '<literal>\</literal>' by default. You
      can, however, change it to any other key in your
      <filename>~/.vimrc</filename> file. For example to change it to a
      comma '<literal>,</literal>', insert the following line
     </para>
<screen>let maplocalleader = ","</screen>
     <para>
      and run <command>:source ~/.vimrc</command> to make it effective.
     </para>
     <para>
      From now on, I assume you have re-mapped the &lt;localleader&gt; to a
      comma character <literal>,</literal> :-)
     </para>
    </tip>
    <informaltable>
     <tgroup cols="4">
      <colspec colname='c1' colwidth='.5in'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
      <thead>
       <row>
        <entry>mapping</entry>
        <entry>when</entry>
        <entry>result</entry>
        <entry>description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
<screen>,]</screen>
        </entry>
        <entry>
<screen>&lt;!-- some commented | text --&gt;</screen>
        </entry>
        <entry>the same text no longer commented|</entry>
        <entry>removes &lt;!-- --&gt; delimiters and puts the cursor at the end of the text</entry>
       </row>
       <row>
        <entry>
<screen>,}</screen>
        </entry>
        <entry>
<screen>&lt;!-- some commented | text --&gt;</screen>
        </entry>
        <entry>|</entry>
        <entry>removes the whole &lt;!-- --&gt; section</entry>
       </row>
       <row>
        <entry>
<screen>[[</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the previous opening tag</entry>
       </row>
       <row>
        <entry>
<screen>]]</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the next opening tag</entry>
       </row>
       <row>
        <entry>
<screen>[]</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the previous closing tag</entry>
       </row>
       <row>
        <entry>
<screen>][</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the next closing tag</entry>
       </row>
       <row>
        <entry>
<screen>["</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the next comment</entry>
       </row>
       <row>
        <entry>
<screen>]"</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">go to the previous comment</entry>
       </row>
       <row>
        <entry>
<screen>,5</screen> or <screen>,%</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">jump to the beginning of the matching opening/closing tag</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
   <sect3>
    <title>Advanced Editing Techniques</title>
    <informaltable>
     <tgroup cols="4">
      <colspec colname='c1' colwidth='.5in'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
      <thead>
       <row>
        <entry>mapping</entry>
        <entry>when</entry>
        <entry>result</entry>
        <entry>description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
<screen>,c</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">rename a tag</entry>
       </row>
       <row>
        <entry>
<screen>,C</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">rename a tag and ask for its attributes</entry>
       </row>
       <row>
        <entry>
<screen>,d</screen>
        </entry>
        <entry>&lt;pa|ra&gt;outer &lt;emphasis&gt;inner&lt;/emphasis&gt; outer&lt;para&gt;</entry>
        <entry>outer &lt;emphasis&gt;inner&lt;/emphasis&gt; outer</entry>
        <entry>removes the surrounding tag</entry>
       </row>
       <row>
        <entry>
<screen>,D</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;outer
&lt;em|phasis&gt;inner&lt;/emphasis&gt;
outer&lt;para&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;
outer outer
&lt;para&gt;</screen>
        </entry>
        <entry>removes the surrounding tag and its content</entry>
       </row>
       <row>
        <entry>
<screen>,e</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;some text|</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;some text&lt;para&gt;</screen>
        </entry>
        <entry>provides a closing tag for the preceding unclosed opening tag</entry>
       </row>
       <row>
        <entry>
<screen>,s</screen>
        </entry>
        <entry>
<screen>|some text&lt;/para&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;some text&lt;para&gt;</screen>
        </entry>
        <entry>provides an opening tag for the following unopened closing tag</entry>
       </row>
       <row>
        <entry>
<screen>,f</screen>
        </entry>
        <entry>
<screen>&lt;pa|ra&gt;
 line1
 line2
 line3
 &lt;/para&gt;</screen>
        </entry>
        <entry>
<screen>+-- 5 lines: &lt;para&gt;---------- </screen>
        </entry>
        <entry>folds the tag under the cursor</entry>
       </row>
       <row>
        <entry>
<screen>,F</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">folds all tags named as the one under the cursor; if there 
        is no tag under the cursor, you will be asked for the tag name</entry>
       </row>
       <row>
        <entry>
<screen>,j</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;para1&lt;/p|ara&gt;
&lt;para&gt;para2&lt;/para&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;para1|
para2&lt;/para&gt;</screen>
        </entry>
        <entry>joins two adjacent elements of the same type, joining and removing the tag under the cursor</entry>
       </row>
       <row>
        <entry>
<screen>,l</screen>
        </entry>
        <entry>
<screen>text</screen>
        </entry>
        <entry>
<screen>&lt;listitem&gt;
 &lt;para&gt;text&lt;/para&gt;
&lt;listitem&gt;</screen>
        </entry>
        <entry>surrounds a visually defined (with <literal>v</literal>) block with &lt;listitem&gt;&lt;para&gt;</entry>
       </row>
       <row>
        <entry>
<screen>,o</screen>
        </entry>
        <entry>
<screen>&lt;pa|ra&gt;text&lt;/para&gt;</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;
&lt;entry&gt;text&lt;/entry&gt;
&lt;/para&gt;</screen>
        </entry>
        <entry>surround the inner text of the current tag with a specified one which you are asked for,
         &lt;entry/&gt; in the example</entry>
       </row>
       <row>
        <entry>
<screen>,O</screen>
        </entry>
        <entry>
<screen>&lt;pa|ra&gt;text&lt;/para&gt;</screen>
        </entry>
        <entry>
<screen>&lt;entry&gt;
 &lt;para&gt;text&lt;/para&gt;
&lt;/entry&gt;</screen>
        </entry>
        <entry>surrounds the tag under the cursor with a specified one which you are asked for,
         &lt;entry/&gt; in the example</entry>
       </row>
       <row>
        <entry>
<screen>,&gt;</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">indents the current element and all its content</entry>
       </row>
       <row>
        <entry>
<screen>,&lt;</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">unindents the current element and all its content</entry>
       </row>
       <row>
        <entry>
<screen>,&lt;</screen>
        </entry>
        <entry>some text|</entry>
        <entry>&lt;!-- some text --&gt;</entry>
        <entry>comments out visually selected text block</entry>
       </row>
       <row>
        <entry>
<screen>,v</screen>
        </entry>
        <entry>
<screen>some text</screen>
        </entry>
        <entry>
<screen>&lt;para&gt;
 some text
&lt;/para&gt;</screen>
        </entry>
        <entry>surrounds the visually selected text block  with a tag which you are asked for,
         &lt;para/&gt; in the example</entry>
       </row>
       <row>
        <entry>
<screen>,5</screen> or <screen>,%</screen>
        </entry>
        <entry namest="c2" nameend="c4" align="center">extends the visual selection up to the matching tag</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>
 </sect1>
 <sect1>
  <title>DTD Support</title>

  <para>
   &vi; can help you autocomplete tags based on the supplied DTD. First you
   have to obtain the DTD definition file for the XML subset (such as
   DocBook) you want to use, the convert it to &vi; compatible format, and
   the let &vi; know which file to load.
  </para>

  <procedure>
   <step>
    <para>
     Download the
     <ulink url="http://search.cpan.org/CPAN/authors/id/E/EH/EHOOD/perlSGML.1997Sep18.tar.gz">perlSGML</ulink>
     package, <command>unzip</command> it, <command>cd</command> to the
     unpacked directory (<filename>perlSGML.1997Sep18/</filename>, run
     <command>perl install.me</command>, and answer to the questions.
    </para>
   </step>
   <step>
    <para>
     Download the DTD file you want to use with &vi;. For example, DocBook5
     DTD can be found at
     <ulink url="http://docbook.org/xml/5.0/dtd/docbook.dtd"/>.
    </para>
   </step>
   <step>
    <para>
     Download
     <ulink url="http://www.vim.org/scripts/download_script.php?src_id=5612">dtd2vim</ulink>
     and run <command>perl dtd2vim docbook.dtd docbook5</command>. The
     script creates the <filename>docbook5.vim</filename> file.
    </para>
   </step>
   <step>
    <para>
     Move <filename>docbook5.vim</filename> to
     <filename>~/.vim/autoload/xml/docbook5.vim</filename>.
    </para>
   </step>
   <step>
    <para>
     Restart &vi; and open some DocBook file. To tell &vi; to use the
     previously converted <filename>docbook5.vim</filename> file, set
     <command>:XMLns docbook5</command> from within the &vi; command mode.
    </para>
   </step>
   <step>
    <para>
     To have &vi; autocomplete the tag for you, start typing it with the
     opening sharp bracket <literal>&lt;</literal> - you can optionally add
     a few initial characters to make the suggestion list smaller - and then
     press the default omni-completion shortcut
     <menuchoice><guimenu>CTRL</guimenu><guimenu>x</guimenu>
     <guimenu>CTRL</guimenu><guimenu>o</guimenu></menuchoice>. &vi; offers
     you a list of possible choices. Select one and press
     <literal>&gt;</literal> to finish the tag.
    </para>
    <tip>
     <para>
      Because <menuchoice><guimenu>CTRL</guimenu><guimenu>x</guimenu>
      <guimenu>CTRL</guimenu><guimenu>o</guimenu></menuchoice> is awkward, I
      suggest you to remap it in your <filename>~/.vimrc</filename> to for
      example
      <menuchoice><guimenu>CTRL</guimenu><guimenu>SPACE</guimenu></menuchoice>
      adding the following lines for XML and DocBook file types:
     </para>
<screen>
autocmd FileType xml imap &lt;C-@&gt; &lt;C-X&gt;&lt;C-O&gt;
autocmd FileType docbk imap &lt;C-@&gt; &lt;C-X&gt;&lt;C-O&gt;
  </screen>
     <para>
      Then restart &vi; and enjoy your wild editing experience :-)
     </para>
    </tip>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Auto-completing XML Entities</title>

  <para>
   If your XML entities are included in the file you are just editing, &vi;
   can auto-complete their names for you - just write the
   initial<literal>&amp;</literal> and press the omni-completion shortcut
   (<menuchoice><guimenu>CTRL</guimenu><guimenu>SPACE</guimenu></menuchoice>
   if you followed me recently).
  </para>

  <para>
   If XML entities are included from other file, &vi; cannot see it. You
   have to convert the entity file into <literal>.vim</literal> format and
   include it into the <literal>vimxmlentities</literal> option in the
   current &vi; DTD file, such as
   <filename>~/.vim/autoload/xml/docbook5.vim</filename>.
  </para>

  <para>
   To ease this process, I included the
   <command>update_docbook_entities.pl</command> script. It takes your
   custom entity file as a first argument, and the DTD .vim file as a second
   argument. It extracts found entities, converts them into &vi;
   understandable format, and adds them into the custom DTD file, such as
   <filename>docbook5.vim</filename>.
  </para>

  <para>
   To add a shortcut to this script to &vi;, add (and customized) this line
   to your <filename>.vimrc</filename> file:
  </para>

<screen>nnoremap &lt;silent> _e :!update_docbook_entities.pl xml/entity-decl.ent ~/.vim/autoload/xml/docbook5.vim&lt;CR>&lt;CR></screen>

  <para>
   This line ensures&mdash;assuming that you moved
   <command>update_docbook_entities.pl</command> to $PATH&mdash;that after
   pressing _e, the entities found in the
   <filename>xml/entity-decl.ent</filename> file will be added to
   <filename>~/.vim/autoload/xml/docbook5.vim</filename>.
  </para>
 </sect1>
 <sect1>
  <title>On-the-fly Spell-Checking</title>

  <para>
   &vi; has a built-in spell checker since version 7. To activate it on the
   current file, enter
  </para>

<screen>:set spell spelllang=en</screen>

  <para>
   on the &vi; command line, or put it in your <filename>.vimrc</filename>
   file:
  </para>

<screen>
autocmd FileType xml set spell spelllang=en
autocmd FileType docbk set spell spelllang=en
</screen>

  <sect2>
   <title>Highlight Content, Not the Markup</title>
   <para>
    The problem is that it highlights misspelled words included in XML tags
    instead of their content. To make &vi; highlight spelling errors in the
    text, enter
   </para>
<screen>:syntax spell toplevel</screen>
   <para>
    To make <command>:syntax spell toplevel</command> start automatically at
    &vi; start, create the <filename>~/.vim/after/syntax/xml.vim</filename>
    file and add the following line:
   </para>
<screen>syntax spell toplevel</screen>
  </sect2>

  <sect2>
   <title>Change Highlighting Style and Colors</title>
   <para>
    By default, &vi; uses the whole cursor block to mark misspelled words.
    To make it underline them only, and color them with red, enter
   </para>
<screen>:highlight SpellBad cterm=underline ctermfg=red ctermbg=none</screen>
  </sect2>

  <sect2>
   <title>Import Foreign Vocabulary</title>
   <para>
    &vi; uses its own language related spell checker dictionary. This
    section helps you use your own custom dictionary (originally an Aspell
    format) and turn it into &vi; spelling wordlist.
   </para>
   <procedure>
    <step>
     <para>
      Get a custom list of words, each word on a separate line. For Aspell
      dictionary <filename>suse_aspell.rws</filename> residing in the
      <filename>/usr/share/daps/lib</filename> directory, use the following
      command:
     </para>
<screen>aspell dump master -l suse_aspell.rws --dict-dir=/usr/share/daps/lib > ~/.vim/spell/suse.utf-8.add</screen>
     <para>
      The wordlist will be saved to
      <filename>.vim/spell/suse.utf-8.add</filename> in your home directory.
     </para>
    </step>
    <step>
     <para>
      Convert the new wordlist into the &vi; compatible format.
     </para>
<screen>:mkspell! ~/.vim/spell/suse.utf-8.add</screen>
    </step>
    <step>
     <para>
      Specify the new dictionary for use with &vi;.
     </para>
<screen>:set spellfile=~/.vim/spell/suse.utf-8.add</screen>.
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1>
  <title>DocBook Markup Macros</title>

  <para></para>
 </sect1>
</article>
